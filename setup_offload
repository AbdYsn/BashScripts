#!/bin/bash

set -e
set -x

interface=""
num_vf=""
token=""
hostname=""
hostip=""
no_deps="false"
ca_hash=""


##################################################
##################################################
##################   input   #####################
##################################################
##################################################

while test $# -gt 0; do
  case "$1" in

   --interface | -i)
      interface=$2
      shift
      shift
      ;;

   --num-vf| -v)
      num_vf=$2
      shift
      shift
      ;;

   --token| -t)
      token=$2
      ca_hash=$3
      shift
      shift
      shift
      ;;

   --hostname)
      hostname=$2
      shift
      shift
      ;;

   --ip)
      hostip=$2
      shift
      shift
      ;;
   
   --no-deps)
      no_deps="true"
      shift
      ;;

   --help | -h)
      echo "
setup_offload [options]: set up a kubernetes kubeadm environment with offloading enabled on the host machine.

options:
 
--interface | -i) <interface>		Specify the interface to enable the offloading on.

   --num-vf| -v) <vfs number>		Specify the number of vfs to be created on the interface

   --token| -t) <cluster token>		An option to indicate that this is a worker host, so that it will join 
					a cluster instead of creating one, pass to it the path to the cluster
					token.
   
   --hostname) <cluster hostname>	The hostname to use for the cluster creating

   --ip) <ip of cluster admin>		The ip of the admin host (master)

   --no-deps)				Do not install the dependencies, use this only if you have ran the 
					command before

"
      exit 0
      ;;
   
   *)
      echo "No such option!!"
      echo "Exitting ...."
      exit 1
  esac
done

##################################################
##################################################
##############   validation   ####################
##################################################
##################################################

if [[ -z $interface ]]
then
   echo "No interface was provided !!!"
   echo "Please provide one using the option --interface or -i"
   echo "for more informaton see the help menu --help or -h"
   echo "Exitting ...."
   exit 1
fi

if [[ -z $num_vf ]]
then
   echo "The number of vfs was not provided !!!"
   echo "Please provide one using the option --num_vf or -v"
   echo "for more informaton see the help menu --help or -h"
   echo "Exitting ...."
   exit 1
fi

if [[ -z $hostip ]]
then
   echo "The ip address was not provided !!!"
   echo "Please provide one using the option --ip"
   echo "for more informaton see the help menu --help or -h"
   echo "Exitting ...."
   exit 1
else
   hostname_check=`cat /etc/hosts | grep $hostname`
   if [[ -z hostname_check ]]
   then
      echo "$hostip $hostname" > /etc/hosts
   fi 
fi

if [[ -z $hostname ]]
then
   echo "The hostname was not provided !!!"
   echo "Will use the machine hostname"
   echo "you can provide one using the option --hostname"
   hostname=`hostname -f`
   echo "the hostname that will be used is: $hostname"
fi


##################################################
##################################################
###############   Functions   ####################
##################################################
##################################################


enable_switchdev(){
   # Configuring num of vfs for the interface
   echo "Configuring num of vfs for the interface"
   vendor_id="$(cat /sys/class/net/$interface/device/vendor)"
   echo $num_vf >/sys/class/net/$interface/device/sriov_numvfs
   
   # Unbinding the vfs for mellanox interfaces
   echo "Unbinding the vfs for mellanox interfaces"
   if [ $vendor_id == "0x15b3" ]
   then
     vfs_pci_list=$(grep PCI_SLOT_NAME /sys/class/net/$interface/device/virtfn*/uevent | cut -d'=' -f2)
     for pci in $vfs_pci_list
     do
       echo "$pci" > /sys/bus/pci/drivers/mlx5_core/unbind
     done
   fi
   
   # Moving the interface to switchdev mode
   echo "Moving the interface to switchdev mode"
   interface_pci=$(grep PCI_SLOT_NAME /sys/class/net/$interface/device/uevent | cut -d'=' -f2)
   /usr/sbin/devlink dev eswitch set pci/"$interface_pci" mode switchdev
   
   #/usr/sbin/ifup $interface
   echo "ifup $interface"
   if [[ "$(/usr/sbin/devlink dev eswitch show pci/"$interface_pci")" =~ "mode switchdev" ]]
   then
     echo "PCI device $interface_pci set to mode switchdev."
   else
     echo "Failed to set PCI device $interface_pci to mode switchdev."
     exit 1
   fi
   interface_device=$(cat /sys/class/net/$interface/device/device)
   if [ "$interface_device" == "0x1013" ] || [ "$interface_device" == "0x1015" ]
   then
     /usr/sbin/devlink dev eswitch set pci/"$interface_pci" inline-mode transport
   fi
   
   # Enabling hw-tc-offload for the interface
   echo "Enabling hw-tc-offload for the interface"
   /usr/sbin/ethtool -K $interface hw-tc-offload on
}

golang_install(){
   echo "installing golang"
   echo "installing deps"
   yum install wget  git -y
  
   echo "installing golang"
   wget https://dl.google.com/go/go1.12.12.linux-amd64.tar.gz
   tar -C /usr/local -xzf go1.12.12.linux-amd64.tar.gz
   cat >> ~/.bashrc <<EOF
export GOPATH=/root/go                                                                                                             
export PATH=$PATH:/usr/local/go/bin
export KUBECONFIG=/etc/kubernetes/admin.conf 
EOF
   source ~/.bashrc
   mkdir -p /etc/cni/net.d/ 
   mkdir -p /opt/cni/bin/
   mkdir -p /root/go/src/github.com/
}

cnis_install(){
   echo "installing containernetworking"
   git clone https://github.com/containernetworking/plugins $GOPATH/src/github.com/containernetworking/plugins
   $GOPATH/src/github.com/containernetworking/plugins/build_linux.sh
   cp $GOPATH/src/github.com/containernetworking/plugins/bin/* /opt/cni/bin 
   
   echo "installing intel sriov-cni"
   git clone https://github.com/intel/sriov-cni $GOPATH/src/github.com/intel/sriov-cni
   cd $GOPATH/src/github.com/intel/sriov-cni
   make build

   echo "cloning sriov-network-device-plugin"
   git clone https://github.com/intel/sriov-network-device-plugin $GOPATH/src/github.com/intel/sriov-network-device-plugin
}

kubernetes_install(){
   echo "installing kubernetes"
   echo "preparing the repo"
   sudo tee -a /etc/yum.repos.d/kubernetes.repo <<EOF
[kubernets-stable]
name=Kuberenets
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
  
   echo "installing the packages" 
   yum -y install kubelet apt-transport-https ca-certificates curl software-properties-common python3-pip virtualenv python3-setuptools kubeadm
}

docker_install(){
   echo "installing the docker"
   echo "installing deps"
   yum install -y yum-utils device-mapper-persistent-data lvm2 mstflint bind-utils
   yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
   
   echo "installing and running docker"
   yum install -y docker-ce docker-ce-cli containerd.io
   systemctl start docker
   systemctl enable docker
}

init_kubadmin(){
   echo "initializzing kubelete"
   echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
   swapoff -a
   if [[ -z $token ]]
   then 
   	kubeadm init --apiserver-advertise-address=$hostip --node-name=$hostname  --skip-phases addon/kube-proxy --pod-network-cidr 192.168.0.0/16 --service-cidr 10.90.0.0/16
      export KUBECONFIG=/etc/kubernetes/admin.conf
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config
   else
      kubeadm join --token token #ca_cert_hash ca_hash 
   fi
}

ovn_cni_setup(){
   echo "installing kubernetes ovn cni"
   git clone https://github.com/ovn-org/ovn-kubernetes.git &
   cd ovn-kubernetes/
   git checkout 7ae417ea9922bad43c2d575e39e2ebae9962d2a5
   cd go-controller/
   make 
   make install 
   echo "{\"cniVersion\":\"0.3.1\", \"name\":\"ovn-kubernetes\", \"type\":\"ovn-k8s-cni-overlay\"}" > /etc/cni/net.d/10-ovn-kubernetes.conf
   systemctl restart kubelet
}

firewall_allow(){
   # the first inout is the protocol and the second input is the port
   sudo iptables -I INPUT 1 -p $1 --dport $2 -j ACCEPT
}

firewall_handling(){
   systemctl stop firewalld
   systemctl disable firewalld
}

##################################################
##################################################
###################   Main   #####################
##################################################
##################################################


if [[ $no_deps == "false" ]]
then
   golang_install
   cnis_install
   kubernetes_install
   docker_install
fi

firewall_handling
enable_switchdev
init_kubadmin
ovn_cni_setup



